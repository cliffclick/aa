// Check wrapped prims
// Type: A:@{ i=int64; is0=int64; mul=( { - A -> A }); sub=( { - @{ i=int64;  ..., } -> A }, { - @{ f=flt64;  ..., } -> B:@{ f=flt64; is0=int64; mul=( { - @{ i=int64;  ..., } -> B }, { - @{ f=flt64;  ..., } -> B }); sub=( { - @{ i=int64;  ..., } -> B }, { - @{ f=flt64;  ..., } -> B }); } }); }
// Eval: @{ i=120; is0=0; mul=( K93[LAMBDA,( $dyn=-,e3=120),( e3=K2[LAMBDA,( e3=K2),( e3=K1[LAMBDA,( e3=K1),()]),()]),( e3=K1),()], K94[LAMBDA,( $dyn=-,e3=120),( e3=K2),( e3=K1),()]); sub=( K96[LAMBDA,( $dyn=-,e3=120),( e3=K2),( e3=K1),()], K97[LAMBDA,( $dyn=-,e3=120),( e3=K2),( e3=K1),()]); }
fwrap = { ff ->
  @{ f = ff;
     is0 = (f> 1.0f ff);
     mul = @{
       fimul = { y0 -> (fwrap (f* ff (i2f y0.i))) };
       ffmul = { y1 -> (fwrap (f* ff      y1.f )) };
     };
     sub = @{
       fisub = { y2 -> (fwrap (f- ff (i2f y2.i))) };
       ffsub = { y3 -> (fwrap (f- ff      y3.f )) };
     };
   }
};

iwrap = { ii ->
  @{ i = ii;
     is0 = (== ii 0);
     mul = @{
       iimul = { y4 -> (iwrap ( *      ii  y4.i)) };
       ifmul = { y5 -> (fwrap (f* (i2f ii) y5.f)) };
     };
     sub = @{
       iisub = { y6 -> (iwrap ( -      ii  y6.i)) };
       ifsub = { y7 -> (fwrap (f- (i2f ii) y7.f)) };
     };
   }
};

c1 = (iwrap 1);

// should type error
fact = { n -> if n.is0 ? (iwrap 1) : (n.mul._ (fact (n.sub._ c1))) };

fact0 = { n -> if n.is0 ? (iwrap 1) : (n.mul._ (fact (n.sub._ c1))) };

(fact0 (fwrap 2.2f))
