// Recursive linked-list discovery, with no end clause.  Since this code has
// no exit (it is an infinite loop, endlessly reading from an infinite input
// and writing an infinite output), gcp gets a cyclic approximation.
// Type: A:{ *[2]@{ $dyn=-; map=A;  ..., } - { - - B -> C } D:*[]@{ n0=D; v0=B;  ..., } -> E:*[3]@{ n1=E; v1=C; } }
// Eval: A:<*[2]@{ _ $dyn=-; map=A; },LAM4>
map = { fcn lst ->
  @{ n1 = (map fcn lst.n0); v1 = (fcn lst.v0); }
};
map
