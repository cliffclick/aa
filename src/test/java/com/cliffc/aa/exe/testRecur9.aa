// Wrapped ints
// Type: A:*[]@{ add={ - - B:*[]@{ add={ - - *[]@{ i=int64;  ..., } *[]@{ i=int64;  ..., } -> B }; i=int64; } C:*[]@{ add={ - - *[]@{ i=int64;  ..., } *[]@{ i=int64;  ..., } -> C }; i=int64; } -> A }; i=int64; }
// Eval: *[2]@{ add=<*[5]@{ _ $dyn=0; arg0=7; },LAM4>; i=7; }
int = { i ->        // An integer is a struct...
  @{ add = { x y -> // With an 'add' field which is a fcn
       (int (+ x.i y.i)) // ... which unwraps to ints and adds and rewraps
     };
     i = i;         // And with the wrapped int
  }
};
x =(int 3);   // x is 3:int
y =(int 4);   // y is 4:int
(x.add x y)  // Wrapped 7:int
